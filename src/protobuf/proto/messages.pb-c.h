/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: proto/messages.proto */

#ifndef PROTOBUF_C_proto_2fmessages_2eproto__INCLUDED
#define PROTOBUF_C_proto_2fmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _GenericMessage GenericMessage;
typedef struct _Ephemeral Ephemeral;
typedef struct _Text Text;
typedef struct _Knock Knock;
typedef struct _LinkPreview LinkPreview;
typedef struct _Tweet Tweet;
typedef struct _Article Article;
typedef struct _Mention Mention;
typedef struct _LastRead LastRead;
typedef struct _Cleared Cleared;
typedef struct _MessageHide MessageHide;
typedef struct _MessageDelete MessageDelete;
typedef struct _MessageEdit MessageEdit;
typedef struct _Confirmation Confirmation;
typedef struct _Location Location;
typedef struct _ImageAsset ImageAsset;
typedef struct _Asset Asset;
typedef struct _Asset__Original Asset__Original;
typedef struct _Asset__Preview Asset__Preview;
typedef struct _Asset__ImageMetaData Asset__ImageMetaData;
typedef struct _Asset__VideoMetaData Asset__VideoMetaData;
typedef struct _Asset__AudioMetaData Asset__AudioMetaData;
typedef struct _Asset__RemoteData Asset__RemoteData;
typedef struct _External External;
typedef struct _Reaction Reaction;
typedef struct _Calling Calling;


/* --- enums --- */

typedef enum _Confirmation__Type {
  CONFIRMATION__TYPE__DELIVERED = 0,
  CONFIRMATION__TYPE__READ = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONFIRMATION__TYPE)
} Confirmation__Type;
typedef enum _Asset__NotUploaded {
  ASSET__NOT_UPLOADED__CANCELLED = 0,
  ASSET__NOT_UPLOADED__FAILED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ASSET__NOT_UPLOADED)
} Asset__NotUploaded;
typedef enum _ClientAction {
  CLIENT_ACTION__RESET_SESSION = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_ACTION)
} ClientAction;
typedef enum _EncryptionAlgorithm {
  ENCRYPTION_ALGORITHM__AES_CBC = 0,
  ENCRYPTION_ALGORITHM__AES_GCM = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENCRYPTION_ALGORITHM)
} EncryptionAlgorithm;

/* --- messages --- */

typedef enum {
  GENERIC_MESSAGE__CONTENT__NOT_SET = 0,
  GENERIC_MESSAGE__CONTENT_TEXT = 2,
  GENERIC_MESSAGE__CONTENT_IMAGE = 3,
  GENERIC_MESSAGE__CONTENT_KNOCK = 4,
  GENERIC_MESSAGE__CONTENT_LAST_READ = 6,
  GENERIC_MESSAGE__CONTENT_CLEARED = 7,
  GENERIC_MESSAGE__CONTENT_EXTERNAL = 8,
  GENERIC_MESSAGE__CONTENT_CLIENT_ACTION = 9,
  GENERIC_MESSAGE__CONTENT_CALLING = 10,
  GENERIC_MESSAGE__CONTENT_ASSET = 11,
  GENERIC_MESSAGE__CONTENT_HIDDEN = 12,
  GENERIC_MESSAGE__CONTENT_LOCATION = 13,
  GENERIC_MESSAGE__CONTENT_DELETED = 14,
  GENERIC_MESSAGE__CONTENT_EDITED = 15,
  GENERIC_MESSAGE__CONTENT_CONFIRMATION = 16,
  GENERIC_MESSAGE__CONTENT_REACTION = 17,
  GENERIC_MESSAGE__CONTENT_EPHEMERAL = 18,
} GenericMessage__ContentCase;

struct  _GenericMessage
{
  ProtobufCMessage base;
  /*
   * client generated random id, preferably UUID
   */
  char *message_id;
  GenericMessage__ContentCase content_case;
  union {
    Text *text;
    /*
     * deprecated in favour of Asset
     */
    ImageAsset *image;
    Knock *knock;
    LastRead *lastread;
    Cleared *cleared;
    External *external;
    ClientAction clientaction;
    Calling *calling;
    Asset *asset;
    MessageHide *hidden;
    Location *location;
    MessageDelete *deleted;
    MessageEdit *edited;
    Confirmation *confirmation;
    Reaction *reaction;
    Ephemeral *ephemeral;
  };
};
#define GENERIC_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&generic_message__descriptor) \
    , NULL, GENERIC_MESSAGE__CONTENT__NOT_SET, {0} }


typedef enum {
  EPHEMERAL__CONTENT__NOT_SET = 0,
  EPHEMERAL__CONTENT_TEXT = 2,
  EPHEMERAL__CONTENT_IMAGE = 3,
  EPHEMERAL__CONTENT_KNOCK = 4,
  EPHEMERAL__CONTENT_ASSET = 5,
  EPHEMERAL__CONTENT_LOCATION = 6,
} Ephemeral__ContentCase;

struct  _Ephemeral
{
  ProtobufCMessage base;
  int64_t expire_after_millis;
  Ephemeral__ContentCase content_case;
  union {
    Text *text;
    ImageAsset *image;
    Knock *knock;
    Asset *asset;
    Location *location;
  };
};
#define EPHEMERAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ephemeral__descriptor) \
    , 0, EPHEMERAL__CONTENT__NOT_SET, {0} }


struct  _Text
{
  ProtobufCMessage base;
  char *content;
  size_t n_mention;
  Mention **mention;
  size_t n_link_preview;
  LinkPreview **link_preview;
};
#define TEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&text__descriptor) \
    , NULL, 0,NULL, 0,NULL }


struct  _Knock
{
  ProtobufCMessage base;
  protobuf_c_boolean hot_knock;
};
#define KNOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&knock__descriptor) \
    , 0 }


typedef enum {
  LINK_PREVIEW__PREVIEW__NOT_SET = 0,
  LINK_PREVIEW__PREVIEW_ARTICLE = 3,
} LinkPreview__PreviewCase;

typedef enum {
  LINK_PREVIEW__META_DATA__NOT_SET = 0,
  LINK_PREVIEW__META_DATA_TWEET = 9,
} LinkPreview__MetaDataCase;

struct  _LinkPreview
{
  ProtobufCMessage base;
  char *url;
  /*
   * url offset from beginning of text message
   */
  int32_t url_offset;
  char *permanent_url;
  char *title;
  char *summary;
  Asset *image;
  LinkPreview__PreviewCase preview_case;
  union {
    /*
     * deprecated - use meta_data
     */
    Article *article;
  };
  LinkPreview__MetaDataCase meta_data_case;
  union {
    Tweet *tweet;
  };
};
#define LINK_PREVIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&link_preview__descriptor) \
    , NULL, 0, NULL, NULL, NULL, NULL, LINK_PREVIEW__PREVIEW__NOT_SET, {0}, LINK_PREVIEW__META_DATA__NOT_SET, {0} }


struct  _Tweet
{
  ProtobufCMessage base;
  char *author;
  char *username;
};
#define TWEET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&tweet__descriptor) \
    , NULL, NULL }


/*
 * deprecated - use the additional fields in LinkPreview
 */
struct  _Article
{
  ProtobufCMessage base;
  char *permanent_url;
  char *title;
  char *summary;
  Asset *image;
};
#define ARTICLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&article__descriptor) \
    , NULL, NULL, NULL, NULL }


struct  _Mention
{
  ProtobufCMessage base;
  char *user_id;
  char *user_name;
};
#define MENTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mention__descriptor) \
    , NULL, NULL }


struct  _LastRead
{
  ProtobufCMessage base;
  char *conversation_id;
  int64_t last_read_timestamp;
};
#define LAST_READ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&last_read__descriptor) \
    , NULL, 0 }


struct  _Cleared
{
  ProtobufCMessage base;
  char *conversation_id;
  int64_t cleared_timestamp;
};
#define CLEARED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cleared__descriptor) \
    , NULL, 0 }


struct  _MessageHide
{
  ProtobufCMessage base;
  char *conversation_id;
  char *message_id;
};
#define MESSAGE_HIDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_hide__descriptor) \
    , NULL, NULL }


struct  _MessageDelete
{
  ProtobufCMessage base;
  char *message_id;
};
#define MESSAGE_DELETE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_delete__descriptor) \
    , NULL }


typedef enum {
  MESSAGE_EDIT__CONTENT__NOT_SET = 0,
  MESSAGE_EDIT__CONTENT_TEXT = 2,
} MessageEdit__ContentCase;

struct  _MessageEdit
{
  ProtobufCMessage base;
  char *replacing_message_id;
  MessageEdit__ContentCase content_case;
  union {
    Text *text;
  };
};
#define MESSAGE_EDIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_edit__descriptor) \
    , NULL, MESSAGE_EDIT__CONTENT__NOT_SET, {0} }


struct  _Confirmation
{
  ProtobufCMessage base;
  Confirmation__Type type;
  char *first_message_id;
  size_t n_more_message_ids;
  char **more_message_ids;
};
#define CONFIRMATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&confirmation__descriptor) \
    , 0, NULL, 0,NULL }


struct  _Location
{
  ProtobufCMessage base;
  float longitude;
  float latitude;
  /*
   * location description/name
   */
  char *name;
  /*
   * google maps zoom level (check maps api documentation)
   */
  protobuf_c_boolean has_zoom;
  int32_t zoom;
};
#define LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&location__descriptor) \
    , 0, 0, NULL, 0,0 }


struct  _ImageAsset
{
  ProtobufCMessage base;
  char *tag;
  int32_t width;
  int32_t height;
  int32_t original_width;
  int32_t original_height;
  char *mime_type;
  int32_t size;
  protobuf_c_boolean has_otr_key;
  ProtobufCBinaryData otr_key;
  /*
   * deprecated - use sha256
   */
  protobuf_c_boolean has_mac_key;
  ProtobufCBinaryData mac_key;
  /*
   * deprecated - use sha256
   */
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
  /*
   * sha256 of ciphertext
   */
  protobuf_c_boolean has_sha256;
  ProtobufCBinaryData sha256;
};
#define IMAGE_ASSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&image_asset__descriptor) \
    , NULL, 0, 0, 0, 0, NULL, 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


typedef enum {
  ASSET__ORIGINAL__META_DATA__NOT_SET = 0,
  ASSET__ORIGINAL__META_DATA_IMAGE = 4,
  ASSET__ORIGINAL__META_DATA_VIDEO = 5,
  ASSET__ORIGINAL__META_DATA_AUDIO = 6,
} Asset__Original__MetaDataCase;

struct  _Asset__Original
{
  ProtobufCMessage base;
  char *mime_type;
  uint64_t size;
  char *name;
  /*
   * link to source e.g. http://giphy.com/234245
   */
  char *source;
  /*
   * caption of the asset, e.g. "dog" for a Giphy "dog" search result
   */
  char *caption;
  Asset__Original__MetaDataCase meta_data_case;
  union {
    Asset__ImageMetaData *image;
    Asset__VideoMetaData *video;
    Asset__AudioMetaData *audio;
  };
};
#define ASSET__ORIGINAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__original__descriptor) \
    , NULL, 0, NULL, NULL, NULL, ASSET__ORIGINAL__META_DATA__NOT_SET, {0} }


typedef enum {
  ASSET__PREVIEW__META_DATA__NOT_SET = 0,
  ASSET__PREVIEW__META_DATA_IMAGE = 4,
} Asset__Preview__MetaDataCase;

struct  _Asset__Preview
{
  ProtobufCMessage base;
  char *mime_type;
  uint64_t size;
  Asset__RemoteData *remote;
  Asset__Preview__MetaDataCase meta_data_case;
  union {
    Asset__ImageMetaData *image;
  };
};
#define ASSET__PREVIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__preview__descriptor) \
    , NULL, 0, NULL, ASSET__PREVIEW__META_DATA__NOT_SET, {0} }


struct  _Asset__ImageMetaData
{
  ProtobufCMessage base;
  int32_t width;
  int32_t height;
  char *tag;
};
#define ASSET__IMAGE_META_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__image_meta_data__descriptor) \
    , 0, 0, NULL }


struct  _Asset__VideoMetaData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_width;
  int32_t width;
  protobuf_c_boolean has_height;
  int32_t height;
  protobuf_c_boolean has_duration_in_millis;
  uint64_t duration_in_millis;
};
#define ASSET__VIDEO_META_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__video_meta_data__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Asset__AudioMetaData
{
  ProtobufCMessage base;
  protobuf_c_boolean has_duration_in_millis;
  uint64_t duration_in_millis;
  /*
   * repeated float normalized_loudness = 2 [packed=true]; // deprecated - Switched to bytes instead
   */
  /*
   * each byte represent one loudness value as a byte (char) value.
   */
  protobuf_c_boolean has_normalized_loudness;
  ProtobufCBinaryData normalized_loudness;
};
#define ASSET__AUDIO_META_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__audio_meta_data__descriptor) \
    , 0,0, 0,{0,NULL} }


struct  _Asset__RemoteData
{
  ProtobufCMessage base;
  ProtobufCBinaryData otr_key;
  /*
   * obsolete but required for backward compatibility
   */
  ProtobufCBinaryData sha256;
  char *asset_id;
  /*
   *    optional bytes asset_token = 4; // deprecated - changed type to string
   */
  char *asset_token;
  protobuf_c_boolean has_encryption;
  EncryptionAlgorithm encryption;
};
#define ASSET__REMOTE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__remote_data__descriptor) \
    , {0,NULL}, {0,NULL}, NULL, NULL, 0,0 }


typedef enum {
  ASSET__STATUS__NOT_SET = 0,
  ASSET__STATUS_NOT_UPLOADED = 3,
  ASSET__STATUS_UPLOADED = 4,
} Asset__StatusCase;

struct  _Asset
{
  ProtobufCMessage base;
  Asset__Original *original;
  Asset__Preview *preview;
  Asset__StatusCase status_case;
  union {
    Asset__NotUploaded not_uploaded;
    Asset__RemoteData *uploaded;
  };
};
#define ASSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&asset__descriptor) \
    , NULL, NULL, ASSET__STATUS__NOT_SET, {0} }


/*
 * Actual message is encrypted with AES and sent as additional data
 */
struct  _External
{
  ProtobufCMessage base;
  ProtobufCBinaryData otr_key;
  /*
   * sha256 of ciphertext, obsolete but required for backward compatibility
   */
  protobuf_c_boolean has_sha256;
  ProtobufCBinaryData sha256;
  protobuf_c_boolean has_encryption;
  EncryptionAlgorithm encryption;
};
#define EXTERNAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&external__descriptor) \
    , {0,NULL}, 0,{0,NULL}, 0,0 }


struct  _Reaction
{
  ProtobufCMessage base;
  /*
   * some emoji reaction or the empty string to remove previous reaction(s)
   */
  char *emoji;
  char *message_id;
};
#define REACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reaction__descriptor) \
    , NULL, NULL }


struct  _Calling
{
  ProtobufCMessage base;
  char *content;
};
#define CALLING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&calling__descriptor) \
    , NULL }


/* GenericMessage methods */
void   generic_message__init
                     (GenericMessage         *message);
size_t generic_message__get_packed_size
                     (const GenericMessage   *message);
size_t generic_message__pack
                     (const GenericMessage   *message,
                      uint8_t             *out);
size_t generic_message__pack_to_buffer
                     (const GenericMessage   *message,
                      ProtobufCBuffer     *buffer);
GenericMessage *
       generic_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   generic_message__free_unpacked
                     (GenericMessage *message,
                      ProtobufCAllocator *allocator);
/* Ephemeral methods */
void   ephemeral__init
                     (Ephemeral         *message);
size_t ephemeral__get_packed_size
                     (const Ephemeral   *message);
size_t ephemeral__pack
                     (const Ephemeral   *message,
                      uint8_t             *out);
size_t ephemeral__pack_to_buffer
                     (const Ephemeral   *message,
                      ProtobufCBuffer     *buffer);
Ephemeral *
       ephemeral__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ephemeral__free_unpacked
                     (Ephemeral *message,
                      ProtobufCAllocator *allocator);
/* Text methods */
void   text__init
                     (Text         *message);
size_t text__get_packed_size
                     (const Text   *message);
size_t text__pack
                     (const Text   *message,
                      uint8_t             *out);
size_t text__pack_to_buffer
                     (const Text   *message,
                      ProtobufCBuffer     *buffer);
Text *
       text__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   text__free_unpacked
                     (Text *message,
                      ProtobufCAllocator *allocator);
/* Knock methods */
void   knock__init
                     (Knock         *message);
size_t knock__get_packed_size
                     (const Knock   *message);
size_t knock__pack
                     (const Knock   *message,
                      uint8_t             *out);
size_t knock__pack_to_buffer
                     (const Knock   *message,
                      ProtobufCBuffer     *buffer);
Knock *
       knock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   knock__free_unpacked
                     (Knock *message,
                      ProtobufCAllocator *allocator);
/* LinkPreview methods */
void   link_preview__init
                     (LinkPreview         *message);
size_t link_preview__get_packed_size
                     (const LinkPreview   *message);
size_t link_preview__pack
                     (const LinkPreview   *message,
                      uint8_t             *out);
size_t link_preview__pack_to_buffer
                     (const LinkPreview   *message,
                      ProtobufCBuffer     *buffer);
LinkPreview *
       link_preview__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   link_preview__free_unpacked
                     (LinkPreview *message,
                      ProtobufCAllocator *allocator);
/* Tweet methods */
void   tweet__init
                     (Tweet         *message);
size_t tweet__get_packed_size
                     (const Tweet   *message);
size_t tweet__pack
                     (const Tweet   *message,
                      uint8_t             *out);
size_t tweet__pack_to_buffer
                     (const Tweet   *message,
                      ProtobufCBuffer     *buffer);
Tweet *
       tweet__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   tweet__free_unpacked
                     (Tweet *message,
                      ProtobufCAllocator *allocator);
/* Article methods */
void   article__init
                     (Article         *message);
size_t article__get_packed_size
                     (const Article   *message);
size_t article__pack
                     (const Article   *message,
                      uint8_t             *out);
size_t article__pack_to_buffer
                     (const Article   *message,
                      ProtobufCBuffer     *buffer);
Article *
       article__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   article__free_unpacked
                     (Article *message,
                      ProtobufCAllocator *allocator);
/* Mention methods */
void   mention__init
                     (Mention         *message);
size_t mention__get_packed_size
                     (const Mention   *message);
size_t mention__pack
                     (const Mention   *message,
                      uint8_t             *out);
size_t mention__pack_to_buffer
                     (const Mention   *message,
                      ProtobufCBuffer     *buffer);
Mention *
       mention__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mention__free_unpacked
                     (Mention *message,
                      ProtobufCAllocator *allocator);
/* LastRead methods */
void   last_read__init
                     (LastRead         *message);
size_t last_read__get_packed_size
                     (const LastRead   *message);
size_t last_read__pack
                     (const LastRead   *message,
                      uint8_t             *out);
size_t last_read__pack_to_buffer
                     (const LastRead   *message,
                      ProtobufCBuffer     *buffer);
LastRead *
       last_read__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   last_read__free_unpacked
                     (LastRead *message,
                      ProtobufCAllocator *allocator);
/* Cleared methods */
void   cleared__init
                     (Cleared         *message);
size_t cleared__get_packed_size
                     (const Cleared   *message);
size_t cleared__pack
                     (const Cleared   *message,
                      uint8_t             *out);
size_t cleared__pack_to_buffer
                     (const Cleared   *message,
                      ProtobufCBuffer     *buffer);
Cleared *
       cleared__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cleared__free_unpacked
                     (Cleared *message,
                      ProtobufCAllocator *allocator);
/* MessageHide methods */
void   message_hide__init
                     (MessageHide         *message);
size_t message_hide__get_packed_size
                     (const MessageHide   *message);
size_t message_hide__pack
                     (const MessageHide   *message,
                      uint8_t             *out);
size_t message_hide__pack_to_buffer
                     (const MessageHide   *message,
                      ProtobufCBuffer     *buffer);
MessageHide *
       message_hide__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_hide__free_unpacked
                     (MessageHide *message,
                      ProtobufCAllocator *allocator);
/* MessageDelete methods */
void   message_delete__init
                     (MessageDelete         *message);
size_t message_delete__get_packed_size
                     (const MessageDelete   *message);
size_t message_delete__pack
                     (const MessageDelete   *message,
                      uint8_t             *out);
size_t message_delete__pack_to_buffer
                     (const MessageDelete   *message,
                      ProtobufCBuffer     *buffer);
MessageDelete *
       message_delete__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_delete__free_unpacked
                     (MessageDelete *message,
                      ProtobufCAllocator *allocator);
/* MessageEdit methods */
void   message_edit__init
                     (MessageEdit         *message);
size_t message_edit__get_packed_size
                     (const MessageEdit   *message);
size_t message_edit__pack
                     (const MessageEdit   *message,
                      uint8_t             *out);
size_t message_edit__pack_to_buffer
                     (const MessageEdit   *message,
                      ProtobufCBuffer     *buffer);
MessageEdit *
       message_edit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_edit__free_unpacked
                     (MessageEdit *message,
                      ProtobufCAllocator *allocator);
/* Confirmation methods */
void   confirmation__init
                     (Confirmation         *message);
size_t confirmation__get_packed_size
                     (const Confirmation   *message);
size_t confirmation__pack
                     (const Confirmation   *message,
                      uint8_t             *out);
size_t confirmation__pack_to_buffer
                     (const Confirmation   *message,
                      ProtobufCBuffer     *buffer);
Confirmation *
       confirmation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   confirmation__free_unpacked
                     (Confirmation *message,
                      ProtobufCAllocator *allocator);
/* Location methods */
void   location__init
                     (Location         *message);
size_t location__get_packed_size
                     (const Location   *message);
size_t location__pack
                     (const Location   *message,
                      uint8_t             *out);
size_t location__pack_to_buffer
                     (const Location   *message,
                      ProtobufCBuffer     *buffer);
Location *
       location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   location__free_unpacked
                     (Location *message,
                      ProtobufCAllocator *allocator);
/* ImageAsset methods */
void   image_asset__init
                     (ImageAsset         *message);
size_t image_asset__get_packed_size
                     (const ImageAsset   *message);
size_t image_asset__pack
                     (const ImageAsset   *message,
                      uint8_t             *out);
size_t image_asset__pack_to_buffer
                     (const ImageAsset   *message,
                      ProtobufCBuffer     *buffer);
ImageAsset *
       image_asset__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   image_asset__free_unpacked
                     (ImageAsset *message,
                      ProtobufCAllocator *allocator);
/* Asset__Original methods */
void   asset__original__init
                     (Asset__Original         *message);
/* Asset__Preview methods */
void   asset__preview__init
                     (Asset__Preview         *message);
/* Asset__ImageMetaData methods */
void   asset__image_meta_data__init
                     (Asset__ImageMetaData         *message);
/* Asset__VideoMetaData methods */
void   asset__video_meta_data__init
                     (Asset__VideoMetaData         *message);
/* Asset__AudioMetaData methods */
void   asset__audio_meta_data__init
                     (Asset__AudioMetaData         *message);
/* Asset__RemoteData methods */
void   asset__remote_data__init
                     (Asset__RemoteData         *message);
/* Asset methods */
void   asset__init
                     (Asset         *message);
size_t asset__get_packed_size
                     (const Asset   *message);
size_t asset__pack
                     (const Asset   *message,
                      uint8_t             *out);
size_t asset__pack_to_buffer
                     (const Asset   *message,
                      ProtobufCBuffer     *buffer);
Asset *
       asset__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   asset__free_unpacked
                     (Asset *message,
                      ProtobufCAllocator *allocator);
/* External methods */
void   external__init
                     (External         *message);
size_t external__get_packed_size
                     (const External   *message);
size_t external__pack
                     (const External   *message,
                      uint8_t             *out);
size_t external__pack_to_buffer
                     (const External   *message,
                      ProtobufCBuffer     *buffer);
External *
       external__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   external__free_unpacked
                     (External *message,
                      ProtobufCAllocator *allocator);
/* Reaction methods */
void   reaction__init
                     (Reaction         *message);
size_t reaction__get_packed_size
                     (const Reaction   *message);
size_t reaction__pack
                     (const Reaction   *message,
                      uint8_t             *out);
size_t reaction__pack_to_buffer
                     (const Reaction   *message,
                      ProtobufCBuffer     *buffer);
Reaction *
       reaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reaction__free_unpacked
                     (Reaction *message,
                      ProtobufCAllocator *allocator);
/* Calling methods */
void   calling__init
                     (Calling         *message);
size_t calling__get_packed_size
                     (const Calling   *message);
size_t calling__pack
                     (const Calling   *message,
                      uint8_t             *out);
size_t calling__pack_to_buffer
                     (const Calling   *message,
                      ProtobufCBuffer     *buffer);
Calling *
       calling__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   calling__free_unpacked
                     (Calling *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*GenericMessage_Closure)
                 (const GenericMessage *message,
                  void *closure_data);
typedef void (*Ephemeral_Closure)
                 (const Ephemeral *message,
                  void *closure_data);
typedef void (*Text_Closure)
                 (const Text *message,
                  void *closure_data);
typedef void (*Knock_Closure)
                 (const Knock *message,
                  void *closure_data);
typedef void (*LinkPreview_Closure)
                 (const LinkPreview *message,
                  void *closure_data);
typedef void (*Tweet_Closure)
                 (const Tweet *message,
                  void *closure_data);
typedef void (*Article_Closure)
                 (const Article *message,
                  void *closure_data);
typedef void (*Mention_Closure)
                 (const Mention *message,
                  void *closure_data);
typedef void (*LastRead_Closure)
                 (const LastRead *message,
                  void *closure_data);
typedef void (*Cleared_Closure)
                 (const Cleared *message,
                  void *closure_data);
typedef void (*MessageHide_Closure)
                 (const MessageHide *message,
                  void *closure_data);
typedef void (*MessageDelete_Closure)
                 (const MessageDelete *message,
                  void *closure_data);
typedef void (*MessageEdit_Closure)
                 (const MessageEdit *message,
                  void *closure_data);
typedef void (*Confirmation_Closure)
                 (const Confirmation *message,
                  void *closure_data);
typedef void (*Location_Closure)
                 (const Location *message,
                  void *closure_data);
typedef void (*ImageAsset_Closure)
                 (const ImageAsset *message,
                  void *closure_data);
typedef void (*Asset__Original_Closure)
                 (const Asset__Original *message,
                  void *closure_data);
typedef void (*Asset__Preview_Closure)
                 (const Asset__Preview *message,
                  void *closure_data);
typedef void (*Asset__ImageMetaData_Closure)
                 (const Asset__ImageMetaData *message,
                  void *closure_data);
typedef void (*Asset__VideoMetaData_Closure)
                 (const Asset__VideoMetaData *message,
                  void *closure_data);
typedef void (*Asset__AudioMetaData_Closure)
                 (const Asset__AudioMetaData *message,
                  void *closure_data);
typedef void (*Asset__RemoteData_Closure)
                 (const Asset__RemoteData *message,
                  void *closure_data);
typedef void (*Asset_Closure)
                 (const Asset *message,
                  void *closure_data);
typedef void (*External_Closure)
                 (const External *message,
                  void *closure_data);
typedef void (*Reaction_Closure)
                 (const Reaction *message,
                  void *closure_data);
typedef void (*Calling_Closure)
                 (const Calling *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    client_action__descriptor;
extern const ProtobufCEnumDescriptor    encryption_algorithm__descriptor;
extern const ProtobufCMessageDescriptor generic_message__descriptor;
extern const ProtobufCMessageDescriptor ephemeral__descriptor;
extern const ProtobufCMessageDescriptor text__descriptor;
extern const ProtobufCMessageDescriptor knock__descriptor;
extern const ProtobufCMessageDescriptor link_preview__descriptor;
extern const ProtobufCMessageDescriptor tweet__descriptor;
extern const ProtobufCMessageDescriptor article__descriptor;
extern const ProtobufCMessageDescriptor mention__descriptor;
extern const ProtobufCMessageDescriptor last_read__descriptor;
extern const ProtobufCMessageDescriptor cleared__descriptor;
extern const ProtobufCMessageDescriptor message_hide__descriptor;
extern const ProtobufCMessageDescriptor message_delete__descriptor;
extern const ProtobufCMessageDescriptor message_edit__descriptor;
extern const ProtobufCMessageDescriptor confirmation__descriptor;
extern const ProtobufCEnumDescriptor    confirmation__type__descriptor;
extern const ProtobufCMessageDescriptor location__descriptor;
extern const ProtobufCMessageDescriptor image_asset__descriptor;
extern const ProtobufCMessageDescriptor asset__descriptor;
extern const ProtobufCMessageDescriptor asset__original__descriptor;
extern const ProtobufCMessageDescriptor asset__preview__descriptor;
extern const ProtobufCMessageDescriptor asset__image_meta_data__descriptor;
extern const ProtobufCMessageDescriptor asset__video_meta_data__descriptor;
extern const ProtobufCMessageDescriptor asset__audio_meta_data__descriptor;
extern const ProtobufCMessageDescriptor asset__remote_data__descriptor;
extern const ProtobufCEnumDescriptor    asset__not_uploaded__descriptor;
extern const ProtobufCMessageDescriptor external__descriptor;
extern const ProtobufCMessageDescriptor reaction__descriptor;
extern const ProtobufCMessageDescriptor calling__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_proto_2fmessages_2eproto__INCLUDED */
